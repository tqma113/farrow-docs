(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),s=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=s(n),d=r,m=b["".concat(p,".").concat(d)]||b[d]||u[d]||i;return n?a.a.createElement(m,o(o({ref:t},l),{},{components:n})):a.a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var l=2;l<i;l++)p[l]=n[l];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),i=(n(0),n(116)),p={title:"Develop Server"},o={unversionedId:"tutorial/02-develop-server",id:"tutorial/02-develop-server",isDocsHomePage:!1,title:"Develop Server",description:"Simple sample code has been included in the farrow-vite-react project template, now let's unpack the server-side part.",source:"@site/docs/tutorial/02-develop-server.md",slug:"/tutorial/02-develop-server",permalink:"/farrow-docs/build/docs/tutorial/02-develop-server",editUrl:"https://github.com/Lucifier129/farrow-docs/docs/tutorial/02-develop-server.md",version:"current",sidebar:"docs",previous:{title:"Install and Creating project",permalink:"/farrow-docs/build/docs/tutorial/01-install-and-start"},next:{title:"Develop Front End",permalink:"/farrow-docs/build/docs/tutorial/03-develop-front-end"}},c=[],l={toc:c};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Simple sample code has been included in the ",Object(i.b)("inlineCode",{parentName:"p"},"farrow-vite-react")," project template, now let's unpack the server-side part."),Object(i.b)("p",null,"Look at the server/api/greet.ts file first"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"import farrow-api to define an api"),Object(i.b)("li",{parentName:"ul"},"import farrow-api-server to contain a set of api for a service router"),Object(i.b)("li",{parentName:"ul"},"import farrow-schema to define the schema structure of api")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"// server/api.greet.ts\nimport { Api } from 'farrow-api';\nimport { ApiService } from 'farrow-api-server';\nimport { ObjectType, Type } from 'farrow-schema';\n")),Object(i.b)("p",null,"Then, define the input schema of the greet api by ObjectType. the simplest way is demonstrated here, without the description of the fields"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export class GreetInput extends ObjectType {\n  name = String;\n}\n")),Object(i.b)("p",null,"And then define the output schema of the greet api by ObjectType. Here a structure with a description field is used, and the type of the field needs to be configured at the ",Object(i.b)("inlineCode",{parentName:"p"},"[Type]")," property."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export class GreetOutput extends ObjectType {\n  greet = {\n    description: 'The greeting came from server',\n    [Type]: String,\n  };\n}\n")),Object(i.b)("p",null,"Define an api function with input schema and output schema, ",Object(i.b)("inlineCode",{parentName:"p"},"Api({ description, input, output }, fn)")," \uff0cimplement this api in function ",Object(i.b)("inlineCode",{parentName:"p"},"fn"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export const greet = Api(\n  {\n    description: 'Greeting',\n    input: GreetInput,\n    output: GreetOutput,\n  },\n  (input) => {\n    let greet = `Hello ${input.name}!`;\n    return { greet };\n  }\n);\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"greet")," is a normal function that is not yet associated with any ",Object(i.b)("inlineCode",{parentName:"p"},"server"),". We can package multiple ",Object(i.b)("inlineCode",{parentName:"p"},"api"),"'s into ",Object(i.b)("inlineCode",{parentName:"p"},"entries")," using the ",Object(i.b)("inlineCode",{parentName:"p"},"ApiService")," function of the ",Object(i.b)("inlineCode",{parentName:"p"},"farrow-api-server")," module."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ApiServer(options)")," return a ",Object(i.b)("inlineCode",{parentName:"p"},"router")," object of ",Object(i.b)("inlineCode",{parentName:"p"},"farrow-http")," which can be mount on the specified route."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export const service = ApiService({\n  entries: {\n    greet,\n  },\n});\n")),Object(i.b)("p",null,"Then look at the ",Object(i.b)("inlineCode",{parentName:"p"},"server/api/index.ts")," file\u3002"),Object(i.b)("p",null,"It imports the ",Object(i.b)("inlineCode",{parentName:"p"},"farrow-http")," ",Object(i.b)("inlineCode",{parentName:"p"},"Router"),", imports the ",Object(i.b)("inlineCode",{parentName:"p"},"greet service")," defined earlier, then creates the ",Object(i.b)("inlineCode",{parentName:"p"},"Router")," and hooks the ",Object(i.b)("inlineCode",{parentName:"p"},"greet service")," to the path ",Object(i.b)("inlineCode",{parentName:"p"},"/api/greet"),"."),Object(i.b)("p",null,"In the ",Object(i.b)("inlineCode",{parentName:"p"},"server/api/index.ts")," module, we can compose each ",Object(i.b)("inlineCode",{parentName:"p"},"api service")," as needed and expose a separate ",Object(i.b)("inlineCode",{parentName:"p"},"router")," object to the outside."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"// server/api/index.ts\nimport { Router } from 'farrow-http';\nimport { service as GreetService } from './greet';\n\nexport const services = Router();\n\n// attach greet service\nservices.route('/api/greet').use(GreetService);\n")),Object(i.b)("p",null,"And then, in ",Object(i.b)("inlineCode",{parentName:"p"},"server/index.ts"),", create the ",Object(i.b)("inlineCode",{parentName:"p"},"http")," and mount it on the ",Object(i.b)("inlineCode",{parentName:"p"},"router"),", then ",Object(i.b)("inlineCode",{parentName:"p"},"listen(port)")," to start an ",Object(i.b)("inlineCode",{parentName:"p"},"http server"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"// server/index.ts\nimport path from 'path';\nimport { Http } from 'farrow-http';\nimport { vite } from 'farrow-vite';\n\nimport { services } from './api';\n\n// create http server\nconst http = Http();\n\n// attach service for api\nhttp.use(services);\n\n// attach vite or assets for page\nif (process.env.NODE_ENV === 'development') {\n  // enable vite-dev-server when development\n  http.use(vite());\n} else {\n  // enable vite-bundle-output when production\n  http.serve('/', path.join(__dirname, '../dist/client'));\n}\n\n// start listening\nhttp.listen(3003, () => {\n  console.log('server started at http://localhost:3003');\n});\n")),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"server/index.ts"),", we have enabled ",Object(i.b)("inlineCode",{parentName:"p"},"services")," and ",Object(i.b)("inlineCode",{parentName:"p"},"vite"),", which handle ",Object(i.b)("inlineCode",{parentName:"p"},"api")," and ",Object(i.b)("inlineCode",{parentName:"p"},"page")," respectively."),Object(i.b)("p",null,"Next, let's take a look at the front-end development. Executing the command ",Object(i.b)("inlineCode",{parentName:"p"},"npm run dev")," will start the application."))}s.isMDXComponent=!0}}]);