(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{110:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return s}));var o=t(3),d=t(7),a=(t(0),t(116)),r={title:"Develop Todo App"},p={unversionedId:"tutorial/05-develop-todo-app",id:"tutorial/05-develop-todo-app",isDocsHomePage:!1,title:"Develop Todo App",description:"Create farrow.config.js",source:"@site/docs/tutorial/05-develop-todo-app.md",slug:"/tutorial/05-develop-todo-app",permalink:"/farrow-docs/build/docs/tutorial/05-develop-todo-app",editUrl:"https://github.com/Lucifier129/farrow-docs/docs/tutorial/05-develop-todo-app.md",version:"current",sidebar:"docs",previous:{title:"Develop Todo Service",permalink:"/farrow-docs/build/docs/tutorial/04-develop-todo-service"},next:{title:"General",permalink:"/farrow-docs/build/docs/api"}},i=[{value:"Create farrow.config.js",id:"create-farrowconfigjs",children:[]},{value:"Import the generated modules",id:"import-the-generated-modules",children:[]},{value:"Implement TodoItem component",id:"implement-todoitem-component",children:[]},{value:"Implement App component",id:"implement-app-component",children:[]}],l={toc:i};function s(e){var n=e.components,t=Object(d.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"create-farrowconfigjs"},"Create farrow.config.js"),Object(a.b)("p",null,"First, in the ",Object(a.b)("inlineCode",{parentName:"p"},"farrow.config.js")," configuration file, configure the rules for generating ",Object(a.b)("inlineCode",{parentName:"p"},"farrow-api"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-js"},"const { createFarrowConfig } = require('farrow');\n\nmodule.exports = createFarrowConfig({\n  server: {\n    src: './server',\n    dist: './dist/server',\n  },\n  api: [\n    {\n      src: 'http://localhost:3003/api/todo',\n      dist: `${__dirname}/src/api/todo.ts`,\n    },\n  ],\n});\n")),Object(a.b)("p",null,"Generate the interface ",Object(a.b)("inlineCode",{parentName:"p"},"http://localhost:3003/api/todo")," to the local ",Object(a.b)("inlineCode",{parentName:"p"},"${__dirname}/src/api/todo.ts")," via codegen."),Object(a.b)("p",null,"After running ",Object(a.b)("inlineCode",{parentName:"p"},"farrow dev"),", new files will be added in the directory specified by the ",Object(a.b)("inlineCode",{parentName:"p"},"dist")," configuration."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"/**\n * This file was generated by farrow-api\n * Don't modify it manually\n */\n\nimport { createApiPipelineWithUrl, ApiInvokeOptions } from 'farrow-api-client';\n\n/**\n * {@label Todo}\n */\nexport type Todo = {\n  /**\n   * @remarks todo id\n   */\n  id: number;\n  /**\n   * @remarks todo content\n   */\n  content: string;\n  /**\n   * @remarks todo status\n   */\n  completed: boolean;\n};\n\n/**\n * {@label AddTodoInput}\n */\nexport type AddTodoInput = {\n  /**\n   * @remarks todo content to add\n   */\n  content: string;\n};\n\n/**\n * {@label InvalidAddTodoInput}\n */\nexport type InvalidAddTodoInput = {\n  type: 'InvalidAddTodoInput';\n  message: string;\n};\n\n/**\n * {@label AddTodoSuccess}\n */\nexport type AddTodoSuccess = {\n  type: 'AddTodoSuccess';\n  /**\n   * @remarks a new todo\n   */\n  todo: Todo;\n};\n\n/**\n * {@label AddTodoOutput}\n */\nexport type AddTodoOutput = InvalidAddTodoInput | AddTodoSuccess;\n\n/**\n * {@label RemoveTodoInput}\n */\nexport type RemoveTodoInput = {\n  /**\n   * @remarks todo id wait for removing\n   */\n  todoId: number;\n};\n\n/**\n * {@label TodoIdNotFound}\n */\nexport type TodoIdNotFound = {\n  type: 'TodoIdNotFound';\n  /**\n   * @remarks invalid todo id\n   */\n  todoId: number;\n};\n\n/**\n * {@label RemoveTodoSuccess}\n */\nexport type RemoveTodoSuccess = {\n  type: 'RemoveTodoSuccess';\n  /**\n   * @remarks todo id that removed\n   */\n  todoId: number;\n  /**\n   * @remarks current todos\n   */\n  todos: Todo[];\n};\n\n/**\n * {@label UpdateTodoInput}\n */\nexport type UpdateTodoInput = {\n  /**\n   * @remarks todo id wait for update\n   */\n  todoId: number;\n  /**\n   * @remarks new todo content\n   */\n  content?: string | null | undefined;\n  /**\n   * @remarks new todo status\n   */\n  completed?: boolean | null | undefined;\n};\n\n/**\n * {@label UpdateTodoSuccess}\n */\nexport type UpdateTodoSuccess = {\n  type: 'UpdateTodoSuccess';\n  /**\n   * @remarks todo id that updated\n   */\n  todoId: number;\n  /**\n   * @remarks current todos\n   */\n  todos: Todo[];\n};\n\n/**\n * {@label UpdateTodoOutput}\n */\nexport type UpdateTodoOutput = TodoIdNotFound | UpdateTodoSuccess;\n\nexport const url = 'http://localhost:3003/api/todo';\n\nexport const apiPipeline = createApiPipelineWithUrl(url);\n\nexport const api = {\n  /**\n   * @remarks get todos\n   */\n  getTodos: (input: {}, options?: ApiInvokeOptions) =>\n    apiPipeline.invoke(\n      { type: 'Single', path: ['getTodos'], input },\n      options\n    ) as Promise<{\n      /**\n       * @remarks all todos\n       */\n      todos: Todo[];\n    }>,\n  /**\n   * @remarks add todo\n   */\n  addTodo: (input: AddTodoInput, options?: ApiInvokeOptions) =>\n    apiPipeline.invoke(\n      { type: 'Single', path: ['addTodo'], input },\n      options\n    ) as Promise<AddTodoOutput>,\n  /**\n   * @remarks remove todo\n   */\n  removeTodo: (input: RemoveTodoInput, options?: ApiInvokeOptions) =>\n    apiPipeline.invoke(\n      { type: 'Single', path: ['removeTodo'], input },\n      options\n    ) as Promise<TodoIdNotFound | RemoveTodoSuccess>,\n  /**\n   * @remarks update todo\n   */\n  updateTodo: (input: UpdateTodoInput, options?: ApiInvokeOptions) =>\n    apiPipeline.invoke(\n      { type: 'Single', path: ['updateTodo'], input },\n      options\n    ) as Promise<UpdateTodoOutput>,\n  /**\n   * @remarks clear completed\n   */\n  clearCompleted: (input: {}, options?: ApiInvokeOptions) =>\n    apiPipeline.invoke(\n      { type: 'Single', path: ['clearCompleted'], input },\n      options\n    ) as Promise<{\n      /**\n       * @remarks current todos\n       */\n      todos: Todo[];\n    }>,\n};\n")),Object(a.b)("p",null,"As above, we can see that the type definition of the interface, as well as the call function for the ",Object(a.b)("inlineCode",{parentName:"p"},"api client")," object, is generated."),Object(a.b)("h3",{id:"import-the-generated-modules"},"Import the generated modules"),Object(a.b)("p",null,"Then, in the ",Object(a.b)("inlineCode",{parentName:"p"},"src/App.tsx")," component, we can directly ",Object(a.b)("inlineCode",{parentName:"p"},"import")," the types and objects contained in the generated module."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import React, {\n  useState,\n  useEffect,\n  ChangeEventHandler,\n  MouseEventHandler,\n  KeyboardEventHandler,\n} from 'react';\nimport { api as TodoApi, Todo } from './api/todo';\n")),Object(a.b)("h3",{id:"implement-todoitem-component"},"Implement TodoItem component"),Object(a.b)("p",null,"Then we add the component implementation, defining the ",Object(a.b)("inlineCode",{parentName:"p"},"TodoItem")," component first, which uses the generated ",Object(a.b)("inlineCode",{parentName:"p"},"Todo")," type directly."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"type TodoItemProps = {\n  todo: Todo;\n  onRemove: (todoId: Todo['id']) => unknown;\n  onUpdate: (\n    todoId: Todo['id'],\n    todoData: Partial<Omit<Todo, 'id'>>\n  ) => unknown;\n  onToggle: (todo: Todo) => unknown;\n};\n\nfunction TodoItem(props: TodoItemProps) {\n  const [text, setText] = useState(props.todo.content);\n  const [editable, setEditable] = useState(false);\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleDblClick: MouseEventHandler<HTMLLabelElement> = () => {\n    setEditable(true);\n  };\n\n  const handleUpdate = () => {\n    props.onUpdate(props.todo.id, {\n      content: text,\n    });\n    setEditable(false);\n  };\n\n  const handleKeyUp: KeyboardEventHandler<HTMLInputElement> = (event) => {\n    if (event.key === 'Enter') {\n      handleUpdate();\n    } else if (event.key === 'Escape') {\n      setText(props.todo.content);\n      setEditable(false);\n    }\n  };\n\n  const handleBlur = () => {\n    if (text !== props.todo.content) {\n      handleUpdate();\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={() => props.onToggle(props.todo)}>\n        {props.todo.completed ? 'completed' : 'active'}\n      </button>\n      <button onClick={() => props.onRemove(props.todo.id)}>remove</button>\n      {!editable && <label onClick={handleDblClick}>{text}</label>}\n      {editable && (\n        <input\n          type=\"text\"\n          value={text}\n          onChange={handleChange}\n          onKeyUp={handleKeyUp}\n          onBlur={handleBlur}\n        />\n      )}\n    </div>\n  );\n}\n")),Object(a.b)("h3",{id:"implement-app-component"},"Implement App component"),Object(a.b)("p",null,"Then define the ",Object(a.b)("inlineCode",{parentName:"p"},"App")," component."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [text, setText] = useState('');\n\n  const handleAdd = async () => {\n    const result = await TodoApi.addTodo({\n      content: text,\n    });\n    if (result.type === 'InvalidAddTodoInput') {\n      alert(result.message);\n    } else if (result.type === 'AddTodoSuccess') {\n      setTodos(todos.concat(result.todo));\n      setText('');\n    }\n  };\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleKeyUp: KeyboardEventHandler<HTMLInputElement> = (event) => {\n    if (event.key === 'Enter') {\n      handleAdd();\n    }\n  };\n\n  const handleRemove: TodoItemProps['onRemove'] = async (todoId) => {\n    let result = await TodoApi.removeTodo({\n      todoId: todoId,\n    });\n\n    if (result.type === 'TodoIdNotFound') {\n      alert(`todoId ${todoId} not found`);\n    } else {\n      setTodos(result.todos);\n    }\n  };\n\n  const handleUpdate: TodoItemProps['onUpdate'] = async (todoId, todoData) => {\n    let result = await TodoApi.updateTodo({\n      todoId: todoId,\n      content: todoData.content,\n      completed: todoData.completed,\n    });\n\n    if (result.type === 'TodoIdNotFound') {\n      alert(`todoId ${todoId} not found`);\n    } else {\n      setTodos(result.todos);\n    }\n  };\n\n  const handleToggle: TodoItemProps['onToggle'] = async (todo) => {\n    let result = await TodoApi.updateTodo({\n      todoId: todo.id,\n      completed: !todo.completed,\n    });\n\n    if (result.type === 'TodoIdNotFound') {\n      alert(`todoId ${todo.id} not found`);\n    } else {\n      setTodos(result.todos);\n    }\n  };\n\n  const handleClearCompleted = async () => {\n    let result = await TodoApi.clearCompleted({});\n    setTodos(result.todos);\n  };\n\n  useEffect(() => {\n    const task = async () => {\n      const result = await TodoApi.getTodos({});\n      setTodos(result.todos);\n    };\n    task().catch((error) => {\n      console.log('error', error);\n    });\n  }, []);\n\n  return (\n    <div>\n      <header>\n        <input\n          type=\"text\"\n          placeholder=\"input your todo content\"\n          onChange={handleChange}\n          value={text}\n          onKeyUp={handleKeyUp}\n        />\n        <button onClick={handleClearCompleted}>clear completed</button>\n      </header>\n      <hr />\n      <main>\n        {todos.map((todo) => {\n          return (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              onRemove={handleRemove}\n              onToggle={handleToggle}\n              onUpdate={handleUpdate}\n            />\n          );\n        })}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n")),Object(a.b)("p",null,"In the ",Object(a.b)("inlineCode",{parentName:"p"},"handleAddTodo")," function, we call the ",Object(a.b)("inlineCode",{parentName:"p"},"api.addTodo")," interface and process the ",Object(a.b)("inlineCode",{parentName:"p"},"Tagged Unions")," type it returns."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"const handleAdd = async () => {\n  const result = await TodoApi.addTodo({\n    content: text,\n  });\n  if (result.type === 'InvalidAddTodoInput') {\n    // \u5904\u7406\u975e\u6cd5\u8f93\u5165\n    alert(result.message);\n  } else if (result.type === 'AddTodoSuccess') {\n    // \u5904\u7406\u6210\u529f\u60c5\u51b5\n    setTodos(todos.concat(result.todo));\n    setText('');\n  }\n};\n")),Object(a.b)("p",null,"The pattern is the same in other interfaces such as ",Object(a.b)("inlineCode",{parentName:"p"},"handleRemove"),"."),Object(a.b)("p",null,"In summary, the best practice for ",Object(a.b)("inlineCode",{parentName:"p"},"farrow-api")," is to"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"On the server side, use ",Object(a.b)("inlineCode",{parentName:"li"},"Tagged Unions")," to encode the ",Object(a.b)("inlineCode",{parentName:"li"},"input/output")," of the interface"),Object(a.b)("li",{parentName:"ul"},"On the client side, use ",Object(a.b)("inlineCode",{parentName:"li"},"result.type")," to distinguish between different ",Object(a.b)("inlineCode",{parentName:"li"},"cases")," of data consumption.")),Object(a.b)("p",null,"The finished code can be found in the repository ",Object(a.b)("a",{parentName:"p",href:"https://github.com/farrow-js/farrow-vite-todo-app"},"farrow-js/farrow-vite-todo-app"),"."))}s.isMDXComponent=!0},116:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return b}));var o=t(0),d=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,d=function(e,n){if(null==e)return{};var t,o,d={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(d[t]=e[t]);return d}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(d[t]=e[t])}return d}var l=d.a.createContext({}),s=function(e){var n=d.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=s(e.components);return d.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return d.a.createElement(d.a.Fragment,{},n)}},m=d.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=s(t),m=o,b=c["".concat(r,".").concat(m)]||c[m]||u[m]||a;return t?d.a.createElement(b,p(p({ref:n},l),{},{components:t})):d.a.createElement(b,p({ref:n},l))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,r[1]=p;for(var l=2;l<a;l++)r[l]=t[l];return d.a.createElement.apply(null,r)}return d.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);