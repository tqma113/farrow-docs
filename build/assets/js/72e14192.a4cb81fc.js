(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),l=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||a;return n?o.a.createElement(m,i(i({ref:t},c),{},{components:n})):o.a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=b;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n(3),o=n(7),a=(n(0),n(116)),s={title:"Quick Start"},i={unversionedId:"quick-start",id:"quick-start",isDocsHomePage:!1,title:"Quick Start",description:"- How to install",source:"@site/docs/quick-start.md",slug:"/quick-start",permalink:"/farrow-docs/build/docs/quick-start",editUrl:"https://github.com/Lucifier129/farrow-docs/docs/quick-start.md",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/farrow-docs/build/docs/"},next:{title:"Install and Creating project",permalink:"/farrow-docs/build/docs/tutorial/01-install-and-start"}},p=[{value:"How to install",id:"how-to-install",children:[]},{value:"How to setup a development environment",id:"how-to-setup-a-development-environment",children:[]},{value:"How to setup a server",id:"how-to-setup-a-server",children:[]},{value:"How to setup a https server",id:"how-to-setup-a-https-server",children:[]},{value:"How to serve static assets",id:"how-to-serve-static-assets",children:[]},{value:"How to respond text or json or html or file",id:"how-to-respond-text-or-json-or-html-or-file",children:[]},{value:"How to access request info",id:"how-to-access-request-info",children:[]},{value:"How to match specific request",id:"how-to-match-specific-request",children:[]},{value:"How to pass new request info for downstream middleware",id:"how-to-pass-new-request-info-for-downstream-middleware",children:[]},{value:"How to filter and manipulate response in upstream middleware",id:"how-to-filter-and-manipulate-response-in-upstream-middleware",children:[]},{value:"How to set response headers",id:"how-to-set-response-headers",children:[]},{value:"How to set response cookies",id:"how-to-set-response-cookies",children:[]},{value:"How to set response status",id:"how-to-set-response-status",children:[]},{value:"How to redirect",id:"how-to-redirect",children:[]},{value:"How to merge responses",id:"how-to-merge-responses",children:[]},{value:"How to add router",id:"how-to-add-router",children:[]},{value:"How to add view-engine",id:"how-to-add-view-engine",children:[]},{value:"How to write a farrow hooks",id:"how-to-write-a-farrow-hooks",children:[]}],c={toc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-install"},"How to install")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-setup-a-development-environment"},"How to setup a development environment")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-setup-a-server"},"How to setup a server")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-setup-a-https-server"},"How to setup a https server")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-serve-static-assets"},"How to serve static assets")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-respond-text-or-json-or-html-or-file"},"How to respond text or json or html or file")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-access-request-info"},"How to access request info")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-match-specific-request"},"How to match specific request")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-pass-new-request-info-for-downstream-middleware"},"How to pass new request info for downstream middleware")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-filter-and-manipulate-response-in-upstream-middleware"},"How to filter and manipulate response in upstream middleware")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-set-response-headers"},"How to set response headers")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-set-response-cookies"},"How to set response cookies")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-set-response-status"},"How to set response status")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-redirect"},"How to redirect")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-merge-responses"},"How to merge responses")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-add-router"},"How to add router")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-add-view-engine"},"How to add view-engine")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",{parentName:"li",href:"#how-to-write-a-farrow-hooks"},"How to write a farrow hooks"))),Object(a.b)("h2",{id:"how-to-install"},"How to install"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-shell"},"# via npm\nnpm install --save farrow farrow-pipeline farrow-schema farrow-http\n\n# via yarn\nyarn add farrow farrow-pipeline farrow-schema farrow-http\n")),Object(a.b)("h2",{id:"how-to-setup-a-development-environment"},"How to setup a development environment"),Object(a.b)("p",null,"add ",Object(a.b)("inlineCode",{parentName:"p"},"scripts")," to your ",Object(a.b)("inlineCode",{parentName:"p"},"package.json")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "dev": "farrow dev",\n    "build": "farrow build",\n    "start": "farrow start"\n  }\n}\n')),Object(a.b)("p",null,"and then:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npm run dev")," for developing"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npm run build")," for bundling the source code"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"npm run start")," for runing the output code of bundler")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"farrow")," assumes that your source code is in ",Object(a.b)("inlineCode",{parentName:"p"},"src")," folder, and the output code is in ",Object(a.b)("inlineCode",{parentName:"p"},"dist")," folder."),Object(a.b)("p",null,"You can use ",Object(a.b)("inlineCode",{parentName:"p"},"farrow.config.js")," to change the default configuration, see the ",Object(a.b)("a",{parentName:"p",href:"./"},"documentation")," for more detail."),Object(a.b)("h2",{id:"how-to-setup-a-server"},"How to setup a server"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Http, Response } from 'farrow-http'\n\nconst http = Http()\n\n// add http middleware\nhttp.use(() => {\n  // returning response in middleware\n  return Response.text(`Hello Farrow`)\n})\n\nhttp.listen(3000)\n")),Object(a.b)("h2",{id:"how-to-setup-a-https-server"},"How to setup a https server"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-ts"},"import { Https, Response } from 'farrow-http'\n\nconst CERT = fs.readFileSync(path.join(__dirname, './keys/https-cert.pem'))\nconst KEY = fs.readFileSync(path.join(__dirname, './keys/https-key.pem'))\nconst CA = fs.readFileSync(path.join(__dirname, 'keys/https-csr.pem'))\n\nconst https = Https({\n  tsl: {\n    cert: CERT,\n    ca: CA,\n    key: KEY,\n  },\n})\n\n// add http middleware\nhttps.use(() => {\n  // returning response in middleware\n  return Response.text(`Hello Farrow`)\n})\n\nhttps.listen(3000)\n")),Object(a.b)("h2",{id:"how-to-serve-static-assets"},"How to serve static assets"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.serve('/static', dirname)\n")),Object(a.b)("h2",{id:"how-to-respond-text-or-json-or-html-or-file"},"How to respond text or json or html or file"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"// respond text\nhttp.use(() => {\n  return Response.text(`Farrow`)\n})\n\n// respond json\nhttp.use(() => {\n  return Response.json({\n    farrow: true,\n    data: {},\n  })\n})\n\n// respond html\nhttp.use(() => {\n  return Response.html(`<h1>Farrow</h1>`)\n})\n\n// respond file\nhttp.use(() => {\n  return Response.file(filename)\n})\n")),Object(a.b)("h2",{id:"how-to-access-request-info"},"How to access request info"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use((request) => {\n  // access request pathname\n  console.log('pathname', request.pathname)\n\n  // access request method\n  console.log('method', request.method)\n\n  // access request query\n  console.log('query', request.query)\n\n  // access request body\n  console.log('body', request.body)\n\n  // access request headers\n  console.log('headers', request.headers)\n\n  // access request cookies\n  console.log('cookies', request.cookies)\n})\n")),Object(a.b)("h2",{id:"how-to-match-specific-request"},"How to match specific request"),Object(a.b)("p",null,"Click ",Object(a.b)("a",{parentName:"p",href:"/farrow-docs/build/docs/api/03-farrow-http#router-url-schema"},"Router-Url-Schema")," to read more"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"// http.match(schema).use(...middlewares)\n// farrow will validate request info and extract the data for middlewares\n// schema has the similar shape like request info: { pathname, method, query, body, headers, cookies, params }\n// the params is readed from path-to-regexp if you config schema.pathname to be /product/:id, and params is equal to { id }\n// learn more about pathname: https://github.com/pillarjs/path-to-regexp#usage\nhttp\n  .match({\n    pathname: '/product',\n    // if method was not given, the default value wounld be `GET`.\n    query: {\n      productId: Number,\n    },\n  })\n  .use((request) => {\n    // productId is a number\n    console.log('productId', request.query.productId)\n  })\n\n// or using routing-methods\nhttp.get('/get0/<arg0:int>?<arg1:int>').use((request) => {\n  return Response.json({\n    type: 'get',\n    request,\n  })\n})\n")),Object(a.b)("h2",{id:"how-to-pass-new-request-info-for-downstream-middleware"},"How to pass new request info for downstream middleware"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use((request, next) => {\n  // no need to modify the request, just calling next(new_request) with a new request info\n  return next({\n    ...request,\n    pathname: '/fixed',\n  })\n})\n\nhttp.use((request) => {\n  // request pathname will be '/fixed'\n  console.log('pathname', request.pathname)\n})\n")),Object(a.b)("h2",{id:"how-to-filter-and-manipulate-response-in-upstream-middleware"},"How to filter and manipulate response in upstream middleware"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use(async (request, next) => {\n  // next() returning response received from downstream\n  let response = await next()\n  let headers = {\n    'header-key': 'header-value',\n  }\n  // filter or merge response and return\n  return Response.headers(headers).merge(response)\n})\n\nhttp.use(async (request) => {\n  return Response.json(request)\n})\n")),Object(a.b)("h2",{id:"how-to-set-response-headers"},"How to set response headers"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use(() => {\n  return Response.header('a', '1').header('b', '2').text('ok')\n})\n\n// or\n\nhttp.use(() => {\n  return Response.headers({\n    a: '1',\n    b: '2',\n  }).text('ok')\n})\n")),Object(a.b)("h2",{id:"how-to-set-response-cookies"},"How to set response cookies"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use(() => {\n  return Response.cookie('a', '1').cookie('b', '2').text('ok')\n})\n\n// or\n\nhttp.use(() => {\n  return Response.cookies({\n    a: '1',\n    b: '2',\n  }).text('ok')\n})\n")),Object(a.b)("h2",{id:"how-to-set-response-status"},"How to set response status"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use(() => {\n  return Response.status(404, 'Not Found').html('some text')\n})\n")),Object(a.b)("h2",{id:"how-to-redirect"},"How to redirect"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"http.use(() => {\n  return Response.redirect(targetUrl)\n})\n")),Object(a.b)("h2",{id:"how-to-merge-responses"},"How to merge responses"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"let response0 = Response.status(200)\nlet response1 = Response.header('a', '1')\nlet response2 = Response.header('b', '2')\nlet response3 = Response.cookie('c', '3')\n\nlet response = Response.merge(response0, response1, response2, response3)\n// or\nlet response = response0.merge(response1, response2, response3)\n")),Object(a.b)("h2",{id:"how-to-add-router"},"How to add router"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Router()")," has the same methods like ",Object(a.b)("inlineCode",{parentName:"p"},"Http()")," except ",Object(a.b)("inlineCode",{parentName:"p"},"http.listen(...)")," and ",Object(a.b)("inlineCode",{parentName:"p"},"http.server()")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-typescript"},"import { Http, Router, Response } from 'farrow-http'\n\n// create http\nconst http = Http()\n\n// create product router\nconst product = Router()\n\n// create user router\nconst user = Router()\n\n// add sub route for product\nhttp.route('/product').use(product)\n\n// add sub route for user\nhttp.route('/user').use(user)\n\nhttp.listen(3000)\n\n// handle product router\n// this will match /product/:id\nproduct.get('/<id:int>').use(async (request) => {\n  return Response.json({\n    productId: request.params.id,\n  })\n})\n\n// this will match /product/info\nproduct.get('/info').use(async (request) => {\n  return Response.json({\n    productInfo: {},\n  })\n})\n\n// handle user router\n// this will match /user/:id\nuser.get('/<id:int>').use(async (request) => {\n  return Response.json({\n    userId: request.params.id,\n  })\n})\n\n// this will match /user/info\nuser.get('/info').use(async (request) => {\n  return Response.json({\n    userInfo: {},\n  })\n})\n")),Object(a.b)("h2",{id:"how-to-add-view-engine"},"How to add view-engine"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Farrow")," provide an official server-side rendering library based on ",Object(a.b)("inlineCode",{parentName:"p"},"React"),", but you can implement your own via ",Object(a.b)("inlineCode",{parentName:"p"},"Response.html(...)")," or ",Object(a.b)("inlineCode",{parentName:"p"},"Response.stream(...)"),"."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-shell"},"# via npm\nnpm install --save react react-dom farrow-react\n\n# via yarn\nyarn add react react-dom farrow-react\n")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { useReactView } from 'farrow-react'\n// use Link to auto prefix basename came from http.route(name, ...) or router.route(name, ...)\nimport { Link } from 'farrow-react/Link'\n\nhttp.use(() => {\n  let ReactView = useReactView({\n    docType: '<!doctype html>', // optional, specify the doctype in html response\n    useStream: true, // optional, if ture it will use ReactDOMServer.renderToNodeStream internally\n  })\n\n  return ReactView.render(\n    <>\n      <h1>Hello Farrow-React</h1>\n      <Link href=\"/\">Home</Link>\n    </>,\n  )\n})\n")),Object(a.b)("h2",{id:"how-to-write-a-farrow-hooks"},"How to write a farrow hooks"),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"/farrow-docs/build/docs/api/05-farrow-pipeline#createcontextdefaultvalue-t-context"},"Click here to learn more.")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import { createContext } from 'farrow-pipeline'\nimport { Http, HttpMiddleware } from 'farrow-http'\nimport { useReactView } from 'farrow-react'\n\n// define an interface\ninterface User {\n  id: string\n  name: string\n  email: string\n}\n\n// define a farrow context via interface\nconst UserContext = createContext<User | null>(null)\n\n// define a provider\nconst UserProvider = (): HttpMiddleware => {\n  return async (request, next) => {\n    let session = SessionContext.get()\n    let db = DbContext.get()\n\n    if (!request?.cookies?.token) {\n      return next()\n    }\n\n    let userId = await session.read(request?.cookies?.token)\n\n    let user = await db.query({\n      User: {\n        token,\n      },\n    })\n\n    UserContext.set(user)\n\n    return next()\n  }\n}\n\nconst http = Http()\n\nhttp.use(UserProvider())\n\nhttp\n  .match({\n    pathname: '/userinfo',\n  })\n  .use(async (request, next) => {\n    let ReactView = useReactView()\n    // assert context value is not null or undefined and return context value\n    let user = UserContext.assert()\n\n    return ReactView.render(<div>{JSON.stringify(user)}</div>)\n  })\n")))}l.isMDXComponent=!0}}]);