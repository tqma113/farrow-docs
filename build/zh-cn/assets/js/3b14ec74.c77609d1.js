(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(f,c(c({ref:t},p),{},{components:n})):a.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),o=(n(0),n(116)),i={title:"farrow-federation"},c={unversionedId:"api/19-farrow-federation",id:"api/19-farrow-federation",isDocsHomePage:!1,title:"farrow-federation",description:"A aggregation tool for farrow-api.",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/api/19-farrow-federation.md",slug:"/api/19-farrow-federation",permalink:"/farrow-docs/build/zh-cn/docs/api/19-farrow-federation",editUrl:"https://github.com/Lucifier129/farrow-docs/docs/api/19-farrow-federation.md",version:"current"},l=[{value:"Install",id:"install",children:[]},{value:"Frist Look",id:"frist-look",children:[]},{value:"Services",id:"services",children:[]},{value:"Options",id:"options",children:[{value:"fetch",id:"fetch",children:[]},{value:"fetcher",id:"fetcher",children:[]},{value:"polling",id:"polling",children:[]},{value:"pollingInterval",id:"pollinginterval",children:[]},{value:"errorStack",id:"errorstack",children:[]},{value:"strict",id:"strict",children:[]}]}],p={toc:l};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"A aggregation tool for farrow-api."),Object(o.b)("p",null,"It expands from farrow-api-service and get them together to a new and fully-cover services."),Object(o.b)("h2",{id:"install"},"Install"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"npm install farrow-federation\n\nyarn add farrow-federation\n")),Object(o.b)("h2",{id:"frist-look"},"Frist Look"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"import { Http } from 'farrow-http'\nimport { Federation } from 'farrow-federation'\n\nconst http = Http()\n\nconst service = await Federation([\n  {\n    // anthor farrow-api-server entry\n    url: 'http://localhost:3001/api/todo',\n    namespace: 'todo',\n  },\n])\n\nhttp.use(service)\n\nhttp.listen(3000)\n")),Object(o.b)("p",null,"In this demo, the federation service only group one service that is at http://localhost:3001/api/todo. But as you might expect, it can group more service created by farrow-api-service. It also be a service, so it can group themselves."),Object(o.b)("h2",{id:"services"},"Services"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"export type ApiService = {\n  url: string\n  namespace: string\n}\n\nexport type ApiServices = ApiService[]\n")),Object(o.b)("p",null,"this option for you to pass the all service you want to get together."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"url")," is the service entry and the ",Object(o.b)("inlineCode",{parentName:"p"},"namespace")," is the namespace of this service entry in current federation."),Object(o.b)("h2",{id:"options"},"Options"),Object(o.b)("h3",{id:"fetch"},"fetch"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"fetch?: (input: RequestInfo, init?: RequestInit | undefined) => Promise<globalThis.Response>\n")),Object(o.b)("p",null,"For customing fetch."),Object(o.b)("p",null,"Default: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/node-fetch/node-fetch"},"node-fetch"),"."),Object(o.b)("h3",{id:"fetcher"},"fetcher"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"fetcher?: ((request: ApiSingleRequest) => Promise<ApiResponseSingle>) &\n((request: ApiIntrospectionRequest) => Promise<ApiResponseSingle>) &\n((request: ApiBatchRequest) => Promise<ApiResponseBatch>)\n")),Object(o.b)("p",null,"For customing the function which sends the calling request."),Object(o.b)("p",null,"Default: ",Object(o.b)("a",{parentName:"p",href:"https://github.com/tqma113/farrow-federation/blob/59c824aa5ecaedfa28d37127e727b2a354cb371d/src/helpers.ts#L6"},"createFetcher")),Object(o.b)("h3",{id:"polling"},"polling"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"polling?: boolean\n")),Object(o.b)("p",null,"Polling switch."),Object(o.b)("p",null,"Default: ",Object(o.b)("inlineCode",{parentName:"p"},"false"),"."),Object(o.b)("h3",{id:"pollinginterval"},"pollingInterval"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"pollingInterval?: number\n")),Object(o.b)("p",null,"Polling interval time(ms)."),Object(o.b)("p",null,"Default: ",Object(o.b)("inlineCode",{parentName:"p"},"3000"),"."),Object(o.b)("h3",{id:"errorstack"},"errorStack"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"errorStack?: boolean\n")),Object(o.b)("p",null,"Should display error.stack or not."),Object(o.b)("p",null,"Default: ",Object(o.b)("inlineCode",{parentName:"p"},"process.env.NODE_ENV !== 'production'"),"."),Object(o.b)("h3",{id:"strict"},"strict"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},"strict: true\n")),Object(o.b)("p",null,"Should throw error when connect to services or not."),Object(o.b)("p",null,"Default: ",Object(o.b)("inlineCode",{parentName:"p"},"true")),Object(o.b)("p",null,"Suggestion: ",Object(o.b)("inlineCode",{parentName:"p"},"false")," in development, ",Object(o.b)("inlineCode",{parentName:"p"},"true")," in production."))}s.isMDXComponent=!0}}]);