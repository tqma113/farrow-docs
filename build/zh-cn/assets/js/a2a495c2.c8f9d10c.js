(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{116:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||o;return n?a.a.createElement(m,i(i({ref:t},p),{},{components:n})):a.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<o;p++)c[p]=n[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(116)),c={title:"farrow-schema"},i={unversionedId:"api/04-farrow-schema",id:"api/04-farrow-schema",isDocsHomePage:!1,title:"farrow-schema",description:"farrow-schema is a powerful and extensible schema builder library.",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/api/04-farrow-schema.md",slug:"/api/04-farrow-schema",permalink:"/farrow-docs/build/zh-cn/docs/api/04-farrow-schema",editUrl:"https://github.com/Lucifier129/farrow-docs/docs/api/04-farrow-schema.md",version:"current",sidebar:"docs",previous:{title:"farrow-http",permalink:"/farrow-docs/build/zh-cn/docs/api/03-farrow-http"},next:{title:"farrow-pipeline",permalink:"/farrow-docs/build/zh-cn/docs/api/05-farrow-pipeline"}},s=[{value:"Installation",id:"installation",children:[]},{value:"API",id:"api",children:[]},{value:"Usage",id:"usage",children:[]},{value:"ValidatorType",id:"validatortype",children:[]},{value:"RegExp",id:"regexp",children:[]}],p={toc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"farrow-schema")," is a powerful and extensible schema builder library."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"# via npm\nnpm install --save farrow-schema\n\n# via yarn\nyarn add farrow-schema\n")),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import {\n  Schema, // abstract class inherited by all schema\n  List, // List type constructor\n  ObjectType, // abstract class of object type schema\n  Int, // Int type\n  Float, // Float type\n  ID, // ID type\n  Struct, // Struct type constructor\n  Nullable, // Nullabel type constructor\n  Union, // Union type constructor\n  Intersect, // Intersection type constructor\n  Literal, // Literal type constructor\n  Record, // Record type constructor\n  Json, // Json type\n  Any, // Any type\n  Strict, // Strict type constructor\n  NonStrict, // NonStrict type constructor\n  Tuple, // Tuple type constrcutor\n  pick, // pick object/struct keys to create a new object/struct type\n  omit, // omit object/struct keys to create a new object/struct type\n  keyof, // get the keys of object/struct\n} from 'farrow-schema'\n\n// create transformer for transforming schema to another type\nimport { createTransformer } from 'farrow-schema/transformer'\n\n// schema validator\nimport { Validator } from 'farrow-schema/validator'\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import * as Schema from 'farrow-schema'\nimport { Validator } from 'farrow-schema/validator'\n\nconst { ObjectType, List, ID, Float, Nullable, Struct, Union, Intersect, Literal, Json, Any, Record } = Schema\n\n// define User Object, it supports recursive definition\nclass User extends ObjectType {\n  id = ID\n  name = String\n  orders = List(Order) // order list type\n}\n\n// define Order Object\nclass Order extends ObjectType {\n  id = ID\n  product = Product\n  user = User\n}\n\n// define Product Object\nclass Product extends ObjectType {\n  id = ID\n  title = String\n  description = String\n  price = Float\n}\n\n// define AppState Object\nclass AppState extends ObjectType {\n  descriptors = {\n    a: Boolean,\n    // a light way to construct struct type\n    b: Struct({\n      c: {\n        d: List(Nullable(String)),\n      },\n    }),\n  }\n\n  struct = Struct({\n    a: Number,\n    b: String,\n    c: {\n      deep: {\n        d: List(Boolean),\n      },\n    },\n  })\n\n  nullable = Nullable(List(Number))\n\n  union = Union(List(Number), List(String), List(Boolean))\n\n  intersect = Intersect(Struct({ a: String }), Struct({ b: Boolean }))\n\n  record = Record(Product)\n\n  literal = Literal(12)\n\n  json = Json\n\n  any = Any\n\n  getUser = User\n  getOrder = Order\n  // supports { [Schema.Type]: SchemaCtor }\n  getProduct = {\n    [Schema.Type]: Product,\n    description: 'get product',\n  }\n}\n\ntype T0 = Schema.TypeOf<AppState>\n\ntype T1 = Schema.TypeOf<User>\n\ntype T2 = Schema.TypeOf<Product>\n\nconst result0 = Validator.validate(Product, {\n  id : 'product id'\n  title : 'product title'\n  description : 'product description'\n  price : 1000.1\n})\n\nif (result0.isOk) {\n  console.log(result0.value)\n}\n")),Object(o.b)("h2",{id:"validatortype"},"ValidatorType"),Object(o.b)("p",null,"it's useful to build your own validator-type with custom validate function."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { ValidatorType } from 'farrow-schema/validator'\n\nclass DateType extends ValidatorType<Date> {\n  validate(input: unknown) {\n    if (input instanceof Date) {\n      return this.Ok(input)\n    }\n\n    if (typeof input === 'number' || typeof input === 'string') {\n      return this.Ok(new Date(input))\n    }\n\n    return this.Err(`${input} is not a valid date`)\n  }\n}\n\nclass EmailType extends ValidatorType<string> {\n  validate(input: unknown) {\n    if (typeof input !== 'string') {\n      return this.Err(`${input} should be a string`)\n    }\n\n    if (/^example@farrow\\.com$/.test(input)) {\n      return this.Ok(input)\n    }\n\n    return this.Err(`${input} is not a valid email`)\n  }\n}\n")),Object(o.b)("h2",{id:"regexp"},"RegExp"),Object(o.b)("p",null,"Given a ",Object(o.b)("inlineCode",{parentName:"p"},"regexp")," for creating a validator-type"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"import { RegExp, createSchemaValidator } from 'farrow-schema/validator'\n\nlet Reg0 = RegExp(/123/)\nlet Reg1 = RegExp(/abc/i)\n\nlet validateReg0 = createSchemaValidator(Reg0)\nlet validateReg1 = createSchemaValidator(Reg1)\n\nexpect(assertOk(validateReg0('123'))).toBe('123')\nexpect(() => assertOk(validateReg0('12'))).toThrow()\n\nexpect(assertOk(validateReg1('abc'))).toBe('abc')\nexpect(assertOk(validateReg1('ABC'))).toBe('ABC')\nexpect(() => assertOk(validateReg1('cba'))).toThrow()\n")))}l.isMDXComponent=!0}}]);